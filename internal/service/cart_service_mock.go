// Code generated by mockery v2.53.3. DO NOT EDIT.

package service

import (
	context "context"

	domain "github.com/nikolayk812/go-tests/internal/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockCartService is an autogenerated mock type for the CartService type
type MockCartService struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, ownerID, item
func (_m *MockCartService) AddItem(ctx context.Context, ownerID string, item domain.CartItem) error {
	ret := _m.Called(ctx, ownerID, item)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.CartItem) error); ok {
		r0 = rf(ctx, ownerID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteItem provides a mock function with given fields: ctx, ownerID, productID
func (_m *MockCartService) DeleteItem(ctx context.Context, ownerID string, productID uuid.UUID) error {
	ret := _m.Called(ctx, ownerID, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) error); ok {
		r0 = rf(ctx, ownerID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCart provides a mock function with given fields: ctx, ownerID
func (_m *MockCartService) GetCart(ctx context.Context, ownerID string) (domain.Cart, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for GetCart")
	}

	var r0 domain.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Cart, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Cart); ok {
		r0 = rf(ctx, ownerID)
	} else {
		r0 = ret.Get(0).(domain.Cart)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockCartService creates a new instance of MockCartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCartService {
	mock := &MockCartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
